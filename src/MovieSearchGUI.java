/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author michaelchang
 */

import java.sql.*;
import java.util.List;
import java.util.ArrayList;
import java.text.DecimalFormat;

public class MovieSearchGUI extends javax.swing.JFrame {

    Connection con = hw3.getConnection();
    String[] genreChoices = { "Action", "Adventure", "Animation", "Children", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "Film-Noir", "Horror", "IMAX", "Musical", "Mystery", "Romance", "Sci-Fi", "Short", "Thriller", "War", "Western" };
    List<String> genresSelected = new ArrayList<>();
    List<String> countryChoices = new ArrayList<>();
    String addCountriesQuery = "";
    List<String> countriesSelected = new ArrayList<>();
    String addLocationsQuery = "";
    List<String> locationChoices = new ArrayList<>();
    List<String> locationsSelected = new ArrayList<>();
    String selectLocationsQuery = "";
    String finalTagsQuery = "";
    String tagsQuery = "";
    String tagsQuery2 = "";

    String movieResultsQuery = "SELECT DISTINCT Movie.mID, Movie.movieTitle FROM Movie WHERE Movie.mID IN (";
    List<String> movieSearchResults = new ArrayList<>();
    String andOr = "";

    /**
     * Creates new form MovieSearchGUI
     */
    public MovieSearchGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genresPanel = new javax.swing.JPanel();
        genresLabel = new javax.swing.JLabel();
        genresScrollPane = new javax.swing.JScrollPane();
        genreList = new javax.swing.JList<>();
        addCountriesButton = new javax.swing.JButton();
        countriesPanel = new javax.swing.JPanel();
        countriesLabel = new javax.swing.JLabel();
        countriesScrollPane = new javax.swing.JScrollPane();
        countriesList = new javax.swing.JList<>();
        addLocationsButton = new javax.swing.JButton();
        locationsPanel = new javax.swing.JPanel();
        locationsLabel = new javax.swing.JLabel();
        locationsScrollPane = new javax.swing.JScrollPane();
        locationsList = new javax.swing.JList<>();
        selectLocationsButton = new javax.swing.JButton();
        ratingsPanel = new javax.swing.JPanel();
        criticsRatingsLabel = new javax.swing.JLabel();
        ratingLabel = new javax.swing.JLabel();
        ratingOptions = new javax.swing.JComboBox<>();
        ratingValueLabel = new javax.swing.JLabel();
        ratingValueText = new javax.swing.JTextField();
        numReviewsLabel = new javax.swing.JLabel();
        numReviewsOptions = new javax.swing.JComboBox<>();
        numReviewsValueLabel = new javax.swing.JLabel();
        numReviewsValueText = new javax.swing.JTextField();
        movieYearLabel = new javax.swing.JLabel();
        fromYearLabel = new javax.swing.JLabel();
        toYearLabel = new javax.swing.JLabel();
        fromYearText = new javax.swing.JTextField();
        toYearText = new javax.swing.JTextField();
        addTagsButton = new javax.swing.JButton();
        tagsPanel = new javax.swing.JPanel();
        tagsLabel = new javax.swing.JLabel();
        tagsScrollPane = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        headerPanel = new javax.swing.JPanel();
        headerLabel = new javax.swing.JLabel();
        searchLabel = new javax.swing.JLabel();
        andOrOptions = new javax.swing.JComboBox<>();
        queryPanel = new javax.swing.JPanel();
        queryScrollPane = new javax.swing.JScrollPane();
        queryTextArea = new javax.swing.JTextArea();
        executeQueryButton = new javax.swing.JButton();
        resultsPanel = new javax.swing.JPanel();
        resultsLabel = new javax.swing.JLabel();
        resultsScrollPane = new javax.swing.JScrollPane();
        resultsList = new javax.swing.JList<>();
        movieInfoScrollPane = new javax.swing.JScrollPane();
        movieInfoTextArea = new javax.swing.JTextArea();
        getMovieInfoButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        genresPanel.setBackground(new java.awt.Color(153, 204, 255));

        genresLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        genresLabel.setText("Genres");

        genreList.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() { return genreChoices.length; }
            public String getElementAt(int i) { return genreChoices[i]; }
        });
        genresScrollPane.setViewportView(genreList);

        addCountriesButton.setText("Select Genres");
        addCountriesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCountriesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout genresPanelLayout = new javax.swing.GroupLayout(genresPanel);
        genresPanel.setLayout(genresPanelLayout);
        genresPanelLayout.setHorizontalGroup(
                genresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(genresPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(genresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(genresPanelLayout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addComponent(addCountriesButton)
                                                .addContainerGap(18, Short.MAX_VALUE))
                                        .addGroup(genresPanelLayout.createSequentialGroup()
                                                .addGroup(genresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(genresLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(genresScrollPane, javax.swing.GroupLayout.Alignment.TRAILING))
                                                .addContainerGap())))
        );
        genresPanelLayout.setVerticalGroup(
                genresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(genresPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(genresLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(genresScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addCountriesButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        countriesPanel.setBackground(new java.awt.Color(153, 204, 255));

        countriesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        countriesLabel.setText("Countries");

        countriesList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        countriesScrollPane.setViewportView(countriesList);

        addLocationsButton.setText("Select Countries");
        addLocationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLocationsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout countriesPanelLayout = new javax.swing.GroupLayout(countriesPanel);
        countriesPanel.setLayout(countriesPanelLayout);
        countriesPanelLayout.setHorizontalGroup(
                countriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(countriesPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(countriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(countriesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(countriesScrollPane))
                                .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, countriesPanelLayout.createSequentialGroup()
                                .addContainerGap(20, Short.MAX_VALUE)
                                .addComponent(addLocationsButton)
                                .addGap(14, 14, 14))
        );
        countriesPanelLayout.setVerticalGroup(
                countriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(countriesPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(countriesLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(countriesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addLocationsButton)
                                .addContainerGap(25, Short.MAX_VALUE))
        );

        locationsPanel.setBackground(new java.awt.Color(153, 204, 255));

        locationsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        locationsLabel.setText("Filming Locations");

        locationsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        locationsScrollPane.setViewportView(locationsList);
        selectLocationsButton.setText("Select Locations");
        selectLocationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectLocationsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout locationsPanelLayout = new javax.swing.GroupLayout(locationsPanel);
        locationsPanel.setLayout(locationsPanelLayout);
        locationsPanelLayout.setHorizontalGroup(
                locationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(locationsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(locationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(locationsScrollPane)
                                        .addComponent(locationsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, locationsPanelLayout.createSequentialGroup()
                                .addContainerGap(25, Short.MAX_VALUE)
                                .addComponent(selectLocationsButton)
                                .addGap(23, 23, 23))
        );
        locationsPanelLayout.setVerticalGroup(
                locationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(locationsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(locationsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(locationsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(selectLocationsButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ratingsPanel.setBackground(new java.awt.Color(153, 204, 255));

        criticsRatingsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        criticsRatingsLabel.setText("Critic's Ratings");

        ratingLabel.setText("Rating");

        ratingOptions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { ">", "<", ">=", "<=", "=" }));

        ratingValueLabel.setText("Value");

        ratingValueText.setColumns(6);

        numReviewsLabel.setText("Num of Reviews");

        numReviewsOptions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { ">", "<", ">=", "<=", "=" }));

        numReviewsValueLabel.setText("Value");

        numReviewsValueText.setColumns(6);

        movieYearLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        movieYearLabel.setText("Movie Year");

        fromYearLabel.setText("From");

        toYearLabel.setText("To");

        fromYearText.setColumns(6);

        toYearText.setColumns(6);

        addTagsButton.setText("Add Tags");
        addTagsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTagsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ratingsPanelLayout = new javax.swing.GroupLayout(ratingsPanel);
        ratingsPanel.setLayout(ratingsPanelLayout);
        ratingsPanelLayout.setHorizontalGroup(
                ratingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(ratingsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(ratingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(movieYearLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(ratingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(ratingsPanelLayout.createSequentialGroup()
                                                        .addGap(12, 12, 12)
                                                        .addGroup(ratingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(ratingsPanelLayout.createSequentialGroup()
                                                                        .addComponent(numReviewsValueLabel)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                        .addComponent(numReviewsValueText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGroup(ratingsPanelLayout.createSequentialGroup()
                                                                        .addComponent(ratingValueLabel)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                        .addComponent(ratingValueText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGroup(ratingsPanelLayout.createSequentialGroup()
                                                                        .addComponent(ratingLabel)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(ratingOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGroup(ratingsPanelLayout.createSequentialGroup()
                                                                        .addComponent(numReviewsLabel)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(numReviewsOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addGroup(ratingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(criticsRatingsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(ratingsPanelLayout.createSequentialGroup()
                                                                .addGap(44, 44, 44)
                                                                .addComponent(addTagsButton))
                                                        .addGroup(ratingsPanelLayout.createSequentialGroup()
                                                                .addGap(12, 12, 12)
                                                                .addGroup(ratingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                        .addGroup(ratingsPanelLayout.createSequentialGroup()
                                                                                .addComponent(toYearLabel)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addComponent(toYearText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(ratingsPanelLayout.createSequentialGroup()
                                                                                .addComponent(fromYearLabel)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                .addComponent(fromYearText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                                .addContainerGap())
        );
        ratingsPanelLayout.setVerticalGroup(
                ratingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(ratingsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(criticsRatingsLabel)
                                .addGap(18, 18, 18)
                                .addGroup(ratingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(ratingOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(ratingLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ratingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(ratingValueLabel)
                                        .addComponent(ratingValueText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(ratingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(numReviewsLabel)
                                        .addComponent(numReviewsOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ratingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(numReviewsValueLabel)
                                        .addComponent(numReviewsValueText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(movieYearLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ratingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(fromYearLabel)
                                        .addComponent(fromYearText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(ratingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(toYearLabel)
                                        .addComponent(toYearText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addTagsButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tagsPanel.setBackground(new java.awt.Color(153, 204, 255));

        tagsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tagsLabel.setText("Movie Tag Values");

        jList3.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        tagsScrollPane.setViewportView(jList3);

        javax.swing.GroupLayout tagsPanelLayout = new javax.swing.GroupLayout(tagsPanel);
        tagsPanel.setLayout(tagsPanelLayout);
        tagsPanelLayout.setHorizontalGroup(
                tagsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(tagsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(tagsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tagsPanelLayout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(tagsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(tagsScrollPane))
                                .addContainerGap())
        );
        tagsPanelLayout.setVerticalGroup(
                tagsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(tagsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(tagsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tagsScrollPane)
                                .addContainerGap())
        );

        headerPanel.setBackground(new java.awt.Color(153, 204, 255));

        headerLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        headerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerLabel.setText("MOVIE SEARCH APPLICATION");

        searchLabel.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        searchLabel.setText("Search Between Attributes' Values");

        andOrOptions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AND", "OR" }));

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
                headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(headerPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(headerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(headerPanelLayout.createSequentialGroup()
                                                .addComponent(searchLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(andOrOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        headerPanelLayout.setVerticalGroup(
                headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(headerPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(headerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(searchLabel)
                                        .addComponent(andOrOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        queryPanel.setBackground(new java.awt.Color(100, 170, 230));

        queryTextArea.setColumns(20);
        queryTextArea.setRows(5);
        queryTextArea.setText("");
        queryScrollPane.setViewportView(queryTextArea);

        executeQueryButton.setText("Execute Query");
        executeQueryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeQueryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout queryPanelLayout = new javax.swing.GroupLayout(queryPanel);
        queryPanel.setLayout(queryPanelLayout);
        queryPanelLayout.setHorizontalGroup(
                queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(queryPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(queryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(queryPanelLayout.createSequentialGroup()
                                .addGap(97, 97, 97)
                                .addComponent(executeQueryButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        queryPanelLayout.setVerticalGroup(
                queryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(queryPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(queryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(executeQueryButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        resultsPanel.setBackground(new java.awt.Color(100, 170, 230));

        resultsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        resultsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resultsLabel.setText("Search Results");

        resultsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        resultsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        resultsScrollPane.setViewportView(resultsList);

        movieInfoTextArea.setColumns(20);
        movieInfoTextArea.setRows(5);
        movieInfoTextArea.setText("");
        movieInfoScrollPane.setViewportView(movieInfoTextArea);

        getMovieInfoButton.setText("Get Movie Information");
        getMovieInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getMovieInfoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout resultsPanelLayout = new javax.swing.GroupLayout(resultsPanel);
        resultsPanel.setLayout(resultsPanelLayout);
        resultsPanelLayout.setHorizontalGroup(
                resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(resultsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(resultsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(resultsPanelLayout.createSequentialGroup()
                                                .addGroup(resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(resultsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(resultsPanelLayout.createSequentialGroup()
                                                                .addGap(61, 61, 61)
                                                                .addComponent(getMovieInfoButton)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(movieInfoScrollPane)))
                                .addContainerGap())
        );
        resultsPanelLayout.setVerticalGroup(
                resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(resultsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(resultsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(movieInfoScrollPane)
                                        .addGroup(resultsPanelLayout.createSequentialGroup()
                                                .addComponent(resultsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(getMovieInfoButton)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(queryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(resultsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(genresPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(countriesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(locationsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ratingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tagsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(countriesPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(genresPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(locationsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ratingsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(tagsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(queryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(resultsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addCountriesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCountriesButtonActionPerformed
        // TODO add your handling code here:
        if (andOrOptions.getSelectedItem() == "AND") {
            andOr = " INTERSECT ";
        }
        else {
            andOr = " UNION ";
        }

        try {
            genresSelected = genreList.getSelectedValuesList();
            Statement addCountriesStmt = con.createStatement();
            addCountriesQuery = "SELECT Movie.mID " +
                    "FROM Movie, Genres " +
                    "WHERE Movie.mID = Genres.mID AND Genres.genre = \'" + genresSelected.get(0) + "\'";

            for (int i = 1; i < genresSelected.size(); i++) {
                addCountriesQuery += andOr +
                        "SELECT Movie.mID " +
                        "FROM Movie, Genres " +
                        "WHERE Movie.mID = Genres.mID AND Genres.genre = \'" + genresSelected.get(i) + "\'";
            }

            System.out.println(addCountriesQuery);
            ResultSet countriesResultSet = addCountriesStmt.executeQuery("SELECT DISTINCT MovieCountries.movieCountry FROM MovieCountries WHERE MovieCountries.mID IN (" + addCountriesQuery + ") ORDER BY MovieCountries.movieCountry");
            while (countriesResultSet.next()) {
                countryChoices.add(countriesResultSet.getString("movieCountry"));
            }
            javax.swing.DefaultListModel listModel = new javax.swing.DefaultListModel();
            for (int i = 0; i < countryChoices.size(); i++) {
                listModel.addElement(countryChoices.get(i));
            }
            countriesList.setModel(listModel);

        } catch (SQLException e) {
            e.printStackTrace();
        }
        countryChoices.clear();

        queryTextArea.setText(movieResultsQuery + (addCountriesQuery + ")"));

        tagsQuery = "SELECT MovieTags.tagID " +
                "FROM Movie, MovieTags " +
                "WHERE Movie.mID = MovieTags.mID "
                + " AND Movie.mID IN (" + addCountriesQuery + ")";
    }
    //GEN-LAST:event_addCountriesButtonActionPerformed

    private void addLocationsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLocationsButtonActionPerformed
        // TODO add your handling code here:
        try {
            countriesSelected = countriesList.getSelectedValuesList();
            Statement addLocationsStatement = con.createStatement();

            addLocationsQuery = "SELECT Movie.mID " +
                    "FROM MovieCountries, Movie " +
                    "WHERE MovieCountries.movieCountry = \'" + countriesSelected.get(0) + "\'" + " AND MovieCountries.mID = Movie.mID" + " AND Movie.mID IN ( " + addCountriesQuery + " )";

            for (int i = 1; i < countriesSelected.size(); i++) {
                addLocationsQuery += andOr +
                        "SELECT Movie.mID " +
                        "FROM MovieCountries, Movie " +
                        "WHERE MovieCountries.movieCountry = \'" + countriesSelected.get(i) + "\'" + " AND MovieCountries.mID = Movie.mID" + " AND Movie.mID IN ( " + addCountriesQuery + " )";
            }

            System.out.println(addLocationsQuery);
            ResultSet locationsResultSet = addLocationsStatement.executeQuery("SELECT DISTINCT MovieFilmingLocations.filmingLocation FROM MovieFilmingLocations WHERE MovieFilmingLocations.mID IN (" + addLocationsQuery + ") ORDER BY MovieFilmingLocations.filmingLocation");
            while (locationsResultSet.next()) {
                locationChoices.add(locationsResultSet.getString("filmingLocation"));
            }

            javax.swing.DefaultListModel listModel = new javax.swing.DefaultListModel();
            for (int i = 0; i < locationChoices.size(); i++) {
                listModel.addElement(locationChoices.get(i));
            }
            locationsList.setModel(listModel);
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        locationChoices.clear();

        queryTextArea.setText(movieResultsQuery + (addLocationsQuery + ")"));

        tagsQuery = "SELECT MovieTags.tagID " +
                "FROM Movie, MovieTags " +
                "WHERE Movie.mID = MovieTags.mID "
                + " AND Movie.mID IN (" + addLocationsQuery + ")";

    }//GEN-LAST:event_addLocationsButtonActionPerformed

    private void selectLocationsButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            locationsSelected = locationsList.getSelectedValuesList();
            Statement selectLocationsStatement = con.createStatement();

            selectLocationsQuery = "SELECT DISTINCT Movie.mID " +
                    "FROM Movie, MovieFilmingLocations " +
                    "WHERE MovieFilmingLocations.filmingLocation = \'" + locationsSelected.get(0) + "\'" + " AND Movie.mID = MovieFilmingLocations.mID" + " AND Movie.mID IN ( " + addLocationsQuery + " )";

            for (int i = 1; i < locationsSelected.size(); i++) {
                selectLocationsQuery += andOr +
                        "SELECT DISTINCT Movie.mID " +
                        "FROM Movie, MovieFilmingLocations " +
                        "WHERE MovieFilmingLocations.filmingLocation = \'" + locationsSelected.get(i) + "\'" + " AND Movie.mID = MovieFilmingLocations.mID" + " AND Movie.mID IN ( " + addLocationsQuery + " )";
            }

            System.out.println(selectLocationsQuery);
            ResultSet rs3 = selectLocationsStatement.executeQuery(selectLocationsQuery);
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        // locationChoices.clear();
        queryTextArea.setText(movieResultsQuery + (selectLocationsQuery + ")"));

        tagsQuery = "SELECT MovieTags.tagID " +
                "FROM Movie, MovieTags " +
                "WHERE Movie.mID = MovieTags.mID "
                + " AND Movie.mID IN (" + selectLocationsQuery + ")";
    }

    private void addTagsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTagsButtonActionPerformed
        // TODO add your handling code here:
        String selectedRatingsOperator = (String) ratingOptions.getSelectedItem();
        String selectedNumRatingsOperator = (String) numReviewsOptions.getSelectedItem();
        String avgRatingsInput = ratingValueText.getText();
        String avgNumRatingsInput = numReviewsValueText.getText();
        String yearFrom = fromYearText.getText();
        String yearTo = toYearText.getText();
        List<String> tagsArrayList = new ArrayList<>();
        // String tagsQuery = "";

        try {
            if (!ratingValueText.getText().isEmpty()) {
                tagsQuery = "SELECT Movie.mID " +
                        "FROM Movie " +
                        "WHERE ((Movie.allCriticsRating + Movie.topCriticsRating + Movie.audienceRating) / 3) " + selectedRatingsOperator + " " + avgRatingsInput +
                        " AND ((Movie.allCriticsNumReviews + Movie.topCriticsNumReviews + Movie.audienceNumRatings) / 3) " + selectedNumRatingsOperator + " " + avgNumRatingsInput
                        + " AND Movie.releaseYear > " + yearFrom
                        + " AND Movie.mID IN (" + selectLocationsQuery + ")";

                tagsQuery += " INTERSECT " +
                        "SELECT Movie.mID " +
                        "FROM Movie " +
                        "WHERE ((Movie.allCriticsRating + Movie.topCriticsRating + Movie.audienceRating) / 3) " + selectedRatingsOperator + " " + avgRatingsInput +
                        " AND ((Movie.allCriticsNumReviews + Movie.topCriticsNumReviews + Movie.audienceNumRatings) / 3) " + selectedNumRatingsOperator + " " + avgNumRatingsInput
                        + " AND Movie.releaseYear < " + yearTo
                        + " AND Movie.mID IN (" + selectLocationsQuery + ")";
            }

            finalTagsQuery += "SELECT DISTINCT TagValues.tagText " +
                    "FROM Movie, TagValues, MovieTags " +
                    "WHERE Movie.mID = MovieTags.mID AND TagValues.tagID = MovieTags.tagID AND Movie.mID IN (" + tagsQuery + ")";

            System.out.println(finalTagsQuery);
            Statement ratingsStatement = con.createStatement();
            ResultSet tagsResultSet = ratingsStatement.executeQuery(finalTagsQuery);
            while (tagsResultSet.next()) {
                tagsArrayList.add(tagsResultSet.getString("tagText"));
            }
            javax.swing.DefaultListModel listModel = new javax.swing.DefaultListModel();
            for (int i = 0; i < tagsArrayList.size(); i++) {
                listModel.addElement(tagsArrayList.get(i));
            }
            jList3.setModel(listModel);
        }
        catch(SQLException e) {
            e.printStackTrace();
        }

        if (!ratingValueText.getText().isEmpty()) {
            tagsQuery2 = "SELECT Movie.mID " +
                    "FROM Movie " +
                    "WHERE ((Movie.allCriticsRating + Movie.topCriticsRating + Movie.audienceRating) / 3) " + selectedRatingsOperator + " " + avgRatingsInput +
                    " AND ((Movie.allCriticsNumReviews + Movie.topCriticsNumReviews + Movie.audienceNumRatings) / 3) " + selectedNumRatingsOperator + " " + avgNumRatingsInput
                    + " AND Movie.releaseYear > " + yearFrom
                    + " AND Movie.mID IN (" + selectLocationsQuery + ")";

            tagsQuery2 += " INTERSECT " +
                    "SELECT Movie.mID " +
                    "FROM Movie " +
                    "WHERE ((Movie.allCriticsRating + Movie.topCriticsRating + Movie.audienceRating) / 3) " + selectedRatingsOperator + " " + avgRatingsInput +
                    " AND ((Movie.allCriticsNumReviews + Movie.topCriticsNumReviews + Movie.audienceNumRatings) / 3) " + selectedNumRatingsOperator + " " + avgNumRatingsInput
                    + " AND Movie.releaseYear < " + yearTo
                    + " AND Movie.mID IN (" + selectLocationsQuery + ")";

            queryTextArea.setText(movieResultsQuery + (tagsQuery2 + ")"));
            tagsQuery2 = "";
        }
        tagsArrayList.clear();
    }//GEN-LAST:event_addTagsButtonActionPerformed

    private void executeQueryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeQueryButtonActionPerformed
        // TODO add your handling code here:
        int temp1; String temp2;

        movieResultsQuery = queryTextArea.getText();
        try {
            Statement movieResultsStatement = con.createStatement();
            ResultSet movieResultSet = movieResultsStatement.executeQuery(movieResultsQuery);

            while (movieResultSet.next()) {
                temp1 = movieResultSet.getInt("mID");
                temp2 = movieResultSet.getString("movieTitle");
                String temp3 = temp1 + ", " + temp2;
                movieSearchResults.add(temp3);
            }

            javax.swing.DefaultListModel listModel = new javax.swing.DefaultListModel();
            for (int i = 0; i < movieSearchResults.size(); i++) {
                listModel.addElement(movieSearchResults.get(i));
            }
            resultsList.setModel(listModel);
        } catch(SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_executeQueryButtonActionPerformed

    private void getMovieInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getMovieInfoButtonActionPerformed
        // TODO add your handling code here:
        try {
            Statement finalStatement = con.createStatement();
            String selectedMovie = resultsList.getSelectedValue();
            String[] movieIDAndTitle = selectedMovie.split(", ");
            String finalInfo = "";
            finalInfo += (movieIDAndTitle[1] + "\n");

            // Get movie year
            String yearQuery = "SELECT Movie.releaseYear FROM Movie WHERE Movie.mID = " + movieIDAndTitle[0];
            ResultSet rs = finalStatement.executeQuery(yearQuery);
            while (rs.next()) {
                finalInfo += rs.getInt("releaseYear");
            }
            finalInfo += "\n";

            // Get movie genres
            String genreQuery = "SELECT DISTINCT Genres.genre FROM Movie, Genres WHERE Movie.mID = Genres.mID AND Movie.mID = " + movieIDAndTitle[0];
            rs = finalStatement.executeQuery(genreQuery);
            while (rs.next()) {
                finalInfo += (rs.getString("genre") + " ");
            }
            finalInfo += "\n";

            // Get movie countries
            String countriesQuery = "SELECT MovieCountries.movieCountry FROM Movie, MovieCountries WHERE Movie.mID = MovieCountries.mID AND Movie.mID = " + movieIDAndTitle[0];
            rs = finalStatement.executeQuery(countriesQuery);
            while (rs.next()) {
                finalInfo += (rs.getString("movieCountry") + " ");
            }
            finalInfo += "\n";

            // Get movie filming locations
            String locationsQuery = "SELECT DISTINCT MovieFilmingLocations.filmingLocation FROM Movie, MovieFilmingLocations WHERE Movie.mID = MovieFilmingLocations.mID AND Movie.mID = " + movieIDAndTitle[0];
            rs = finalStatement.executeQuery(locationsQuery);
            while (rs.next()) {
                finalInfo += (rs.getString("filmingLocation") + " ");
            }
            finalInfo += "\n";

            // Get average rating
            DecimalFormat f = new DecimalFormat("##.00");
            String avgRatingQuery = "SELECT (allCriticsRating + topCriticsRating + audienceRating) / 3.0 AS avgRating FROM Movie WHERE Movie.mID = " + movieIDAndTitle[0];
            rs = finalStatement.executeQuery(avgRatingQuery);
            while (rs.next()) {
                finalInfo += f.format(rs.getFloat("avgRating"));
            }
            finalInfo += "\n";

            // Get average num reviews
            String avgNumReviewsQuery = "SELECT (allCriticsNumReviews + topCriticsNumReviews + audienceNumRatings) / 3.0 AS avgNumReviews FROM Movie WHERE Movie.mID = " + movieIDAndTitle[0];
            rs = finalStatement.executeQuery(avgNumReviewsQuery);
            while (rs.next()) {
                finalInfo += f.format(rs.getFloat("avgNumReviews"));
            }
            finalInfo += "\n";

            movieInfoTextArea.setText(finalInfo);
        }
        catch(SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_getMovieInfoButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MovieSearchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MovieSearchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MovieSearchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MovieSearchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovieSearchGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCountriesButton;
    private javax.swing.JButton addLocationsButton;
    private javax.swing.JButton addTagsButton;
    private javax.swing.JComboBox<String> andOrOptions;
    private javax.swing.JLabel countriesLabel;
    private javax.swing.JList<String> countriesList;
    private javax.swing.JPanel countriesPanel;
    private javax.swing.JScrollPane countriesScrollPane;
    private javax.swing.JLabel criticsRatingsLabel;
    private javax.swing.JButton executeQueryButton;
    private javax.swing.JLabel fromYearLabel;
    private javax.swing.JTextField fromYearText;
    private javax.swing.JList<String> genreList;
    private javax.swing.JLabel genresLabel;
    private javax.swing.JPanel genresPanel;
    private javax.swing.JScrollPane genresScrollPane;
    private javax.swing.JButton getMovieInfoButton;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JList<String> jList3;
    private javax.swing.JLabel locationsLabel;
    private javax.swing.JList<String> locationsList;
    private javax.swing.JPanel locationsPanel;
    private javax.swing.JScrollPane locationsScrollPane;
    private javax.swing.JScrollPane movieInfoScrollPane;
    private javax.swing.JTextArea movieInfoTextArea;
    private javax.swing.JLabel movieYearLabel;
    private javax.swing.JLabel numReviewsLabel;
    private javax.swing.JComboBox<String> numReviewsOptions;
    private javax.swing.JLabel numReviewsValueLabel;
    private javax.swing.JTextField numReviewsValueText;
    private javax.swing.JPanel queryPanel;
    private javax.swing.JScrollPane queryScrollPane;
    private javax.swing.JTextArea queryTextArea;
    private javax.swing.JLabel ratingLabel;
    private javax.swing.JComboBox<String> ratingOptions;
    private javax.swing.JLabel ratingValueLabel;
    private javax.swing.JTextField ratingValueText;
    private javax.swing.JPanel ratingsPanel;
    private javax.swing.JLabel resultsLabel;
    private javax.swing.JList<String> resultsList;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JButton selectLocationsButton;
    private javax.swing.JLabel tagsLabel;
    private javax.swing.JPanel tagsPanel;
    private javax.swing.JScrollPane tagsScrollPane;
    private javax.swing.JLabel toYearLabel;
    private javax.swing.JTextField toYearText;
    // End of variables declaration//GEN-END:variables
}
